type Query {
  communityByName(name: String!, skip: Int, first: Int, last: Int, before: ID, after: ID): [Community!]!
  communityById(id: ID!, ): Community
  communities(skip: Int, first: Int, last: Int, before: ID, after: ID): [Community!]!
  membersCommunities(communitiesIds: [ID!]!, skip: Int, first: Int, last: Int, before: ID, after: ID): [Community!]!
}

type Mutation {
  createCommunity(ownerId: ID!, name: String!, description: String, privacy: Privacy): Community
  updateCommunity(id: ID!, name: String, description: String, moderatorId: ID, privacy: Privacy): Community
  deleteCommunity(id: ID!): Community
  setStoryToCommunity(id: ID!, storyId: ID!): Community
  setStoryToCommunityByName(name: String!, storyId: ID!): Community
  deleteStoryFromCommunity(id: ID!, storyId: ID!): Community
  setMemberToCommunity(id: ID!, profileId: ID!): Community
  removeMemberFromCommunity(id: ID!, profileId: ID!): Community
  inviteMemberToCommunity(id: ID!, profileId: ID!): Community
}

type Community {
  id: ID!
  ownerId: ID!
  moderatorId: ID!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  membersIds: [ID]
  bannedMembersIds: [ID]
  privacy: Privacy
}

enum Privacy {
  PUBLIC
  PRIVATE
  INVITE_ONLY
}

# used to resolve Prisma DateTime type
scalar DateTime