// Code generated by Prisma (prisma@1.19.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  community: (where?: CommunityWhereInput) => Promise<boolean>;
  memberId: (where?: MemberIdWhereInput) => Promise<boolean>;
  storyId: (where?: StoryIdWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  community: (where: CommunityWhereUniqueInput) => Community;
  communities: (
    args?: {
      where?: CommunityWhereInput;
      orderBy?: CommunityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CommunityNode>;
  communitiesConnection: (
    args?: {
      where?: CommunityWhereInput;
      orderBy?: CommunityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CommunityConnection;
  memberIds: (
    args?: {
      where?: MemberIdWhereInput;
      orderBy?: MemberIdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<MemberIdNode>;
  memberIdsConnection: (
    args?: {
      where?: MemberIdWhereInput;
      orderBy?: MemberIdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MemberIdConnection;
  storyIds: (
    args?: {
      where?: StoryIdWhereInput;
      orderBy?: StoryIdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<StoryIdNode>;
  storyIdsConnection: (
    args?: {
      where?: StoryIdWhereInput;
      orderBy?: StoryIdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => StoryIdConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCommunity: (data: CommunityCreateInput) => Community;
  updateCommunity: (
    args: { data: CommunityUpdateInput; where: CommunityWhereUniqueInput }
  ) => Community;
  updateManyCommunities: (
    args: { data: CommunityUpdateInput; where?: CommunityWhereInput }
  ) => BatchPayload;
  upsertCommunity: (
    args: {
      where: CommunityWhereUniqueInput;
      create: CommunityCreateInput;
      update: CommunityUpdateInput;
    }
  ) => Community;
  deleteCommunity: (where: CommunityWhereUniqueInput) => Community;
  deleteManyCommunities: (where?: CommunityWhereInput) => BatchPayload;
  createMemberId: (data: MemberIdCreateInput) => MemberId;
  updateManyMemberIds: (
    args: { data: MemberIdUpdateInput; where?: MemberIdWhereInput }
  ) => BatchPayload;
  deleteManyMemberIds: (where?: MemberIdWhereInput) => BatchPayload;
  createStoryId: (data: StoryIdCreateInput) => StoryId;
  updateManyStoryIds: (
    args: { data: StoryIdUpdateInput; where?: StoryIdWhereInput }
  ) => BatchPayload;
  deleteManyStoryIds: (where?: StoryIdWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  community: (
    where?: CommunitySubscriptionWhereInput
  ) => CommunitySubscriptionPayloadSubscription;
  memberId: (
    where?: MemberIdSubscriptionWhereInput
  ) => MemberIdSubscriptionPayloadSubscription;
  storyId: (
    where?: StoryIdSubscriptionWhereInput
  ) => StoryIdSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type StoryIdOrderByInput =
  | "storyId_ASC"
  | "storyId_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MemberIdOrderByInput =
  | "memberId_ASC"
  | "memberId_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CommunityOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ownerId_ASC"
  | "ownerId_DESC"
  | "moderatorId_ASC"
  | "moderatorId_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "privacy_ASC"
  | "privacy_DESC";

export type Privacy = "PUBLIC" | "PRIVATE" | "INVITE_ONLY";

export type CommunityWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface MemberIdUpdateManyInput {
  create?: MemberIdCreateInput[] | MemberIdCreateInput;
}

export interface CommunitySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CommunityWhereInput;
  AND?: CommunitySubscriptionWhereInput[] | CommunitySubscriptionWhereInput;
  OR?: CommunitySubscriptionWhereInput[] | CommunitySubscriptionWhereInput;
  NOT?: CommunitySubscriptionWhereInput[] | CommunitySubscriptionWhereInput;
}

export interface StoryIdUpdateManyInput {
  create?: StoryIdCreateInput[] | StoryIdCreateInput;
}

export interface MemberIdWhereInput {
  memberId?: ID_Input;
  memberId_not?: ID_Input;
  memberId_in?: ID_Input[] | ID_Input;
  memberId_not_in?: ID_Input[] | ID_Input;
  memberId_lt?: ID_Input;
  memberId_lte?: ID_Input;
  memberId_gt?: ID_Input;
  memberId_gte?: ID_Input;
  memberId_contains?: ID_Input;
  memberId_not_contains?: ID_Input;
  memberId_starts_with?: ID_Input;
  memberId_not_starts_with?: ID_Input;
  memberId_ends_with?: ID_Input;
  memberId_not_ends_with?: ID_Input;
  AND?: MemberIdWhereInput[] | MemberIdWhereInput;
  OR?: MemberIdWhereInput[] | MemberIdWhereInput;
  NOT?: MemberIdWhereInput[] | MemberIdWhereInput;
}

export interface CommunityUpdateInput {
  ownerId?: ID_Input;
  moderatorId?: ID_Input;
  name?: String;
  description?: String;
  stories?: StoryIdUpdateManyInput;
  members?: MemberIdUpdateManyInput;
  bannedMembers?: MemberIdUpdateManyInput;
  privacy?: Privacy;
}

export interface MemberIdUpdateInput {
  memberId?: ID_Input;
}

export interface MemberIdCreateInput {
  memberId: ID_Input;
}

export interface CommunityWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  ownerId?: ID_Input;
  ownerId_not?: ID_Input;
  ownerId_in?: ID_Input[] | ID_Input;
  ownerId_not_in?: ID_Input[] | ID_Input;
  ownerId_lt?: ID_Input;
  ownerId_lte?: ID_Input;
  ownerId_gt?: ID_Input;
  ownerId_gte?: ID_Input;
  ownerId_contains?: ID_Input;
  ownerId_not_contains?: ID_Input;
  ownerId_starts_with?: ID_Input;
  ownerId_not_starts_with?: ID_Input;
  ownerId_ends_with?: ID_Input;
  ownerId_not_ends_with?: ID_Input;
  moderatorId?: ID_Input;
  moderatorId_not?: ID_Input;
  moderatorId_in?: ID_Input[] | ID_Input;
  moderatorId_not_in?: ID_Input[] | ID_Input;
  moderatorId_lt?: ID_Input;
  moderatorId_lte?: ID_Input;
  moderatorId_gt?: ID_Input;
  moderatorId_gte?: ID_Input;
  moderatorId_contains?: ID_Input;
  moderatorId_not_contains?: ID_Input;
  moderatorId_starts_with?: ID_Input;
  moderatorId_not_starts_with?: ID_Input;
  moderatorId_ends_with?: ID_Input;
  moderatorId_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  stories_every?: StoryIdWhereInput;
  stories_some?: StoryIdWhereInput;
  stories_none?: StoryIdWhereInput;
  members_every?: MemberIdWhereInput;
  members_some?: MemberIdWhereInput;
  members_none?: MemberIdWhereInput;
  bannedMembers_every?: MemberIdWhereInput;
  bannedMembers_some?: MemberIdWhereInput;
  bannedMembers_none?: MemberIdWhereInput;
  privacy?: Privacy;
  privacy_not?: Privacy;
  privacy_in?: Privacy[] | Privacy;
  privacy_not_in?: Privacy[] | Privacy;
  AND?: CommunityWhereInput[] | CommunityWhereInput;
  OR?: CommunityWhereInput[] | CommunityWhereInput;
  NOT?: CommunityWhereInput[] | CommunityWhereInput;
}

export interface CommunityCreateInput {
  ownerId?: ID_Input;
  moderatorId?: ID_Input;
  name: String;
  description?: String;
  stories?: StoryIdCreateManyInput;
  members?: MemberIdCreateManyInput;
  bannedMembers?: MemberIdCreateManyInput;
  privacy?: Privacy;
}

export interface StoryIdCreateManyInput {
  create?: StoryIdCreateInput[] | StoryIdCreateInput;
}

export interface StoryIdCreateInput {
  storyId: ID_Input;
}

export interface MemberIdCreateManyInput {
  create?: MemberIdCreateInput[] | MemberIdCreateInput;
}

export interface MemberIdSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MemberIdWhereInput;
  AND?: MemberIdSubscriptionWhereInput[] | MemberIdSubscriptionWhereInput;
  OR?: MemberIdSubscriptionWhereInput[] | MemberIdSubscriptionWhereInput;
  NOT?: MemberIdSubscriptionWhereInput[] | MemberIdSubscriptionWhereInput;
}

export interface StoryIdSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: StoryIdWhereInput;
  AND?: StoryIdSubscriptionWhereInput[] | StoryIdSubscriptionWhereInput;
  OR?: StoryIdSubscriptionWhereInput[] | StoryIdSubscriptionWhereInput;
  NOT?: StoryIdSubscriptionWhereInput[] | StoryIdSubscriptionWhereInput;
}

export interface StoryIdWhereInput {
  storyId?: ID_Input;
  storyId_not?: ID_Input;
  storyId_in?: ID_Input[] | ID_Input;
  storyId_not_in?: ID_Input[] | ID_Input;
  storyId_lt?: ID_Input;
  storyId_lte?: ID_Input;
  storyId_gt?: ID_Input;
  storyId_gte?: ID_Input;
  storyId_contains?: ID_Input;
  storyId_not_contains?: ID_Input;
  storyId_starts_with?: ID_Input;
  storyId_not_starts_with?: ID_Input;
  storyId_ends_with?: ID_Input;
  storyId_not_ends_with?: ID_Input;
  AND?: StoryIdWhereInput[] | StoryIdWhereInput;
  OR?: StoryIdWhereInput[] | StoryIdWhereInput;
  NOT?: StoryIdWhereInput[] | StoryIdWhereInput;
}

export interface StoryIdUpdateInput {
  storyId?: ID_Input;
}

export interface NodeNode {
  id: ID_Output;
}

export interface StoryIdEdgeNode {
  cursor: String;
}

export interface StoryIdEdge extends Promise<StoryIdEdgeNode>, Fragmentable {
  node: <T = StoryId>() => T;
  cursor: () => Promise<String>;
}

export interface StoryIdEdgeSubscription
  extends Promise<AsyncIterator<StoryIdEdgeNode>>,
    Fragmentable {
  node: <T = StoryIdSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CommunityConnectionNode {}

export interface CommunityConnection
  extends Promise<CommunityConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<CommunityEdgeNode>>() => T;
  aggregate: <T = AggregateCommunity>() => T;
}

export interface CommunityConnectionSubscription
  extends Promise<AsyncIterator<CommunityConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommunityEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommunitySubscription>() => T;
}

export interface MemberIdSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface MemberIdSubscriptionPayload
  extends Promise<MemberIdSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MemberId>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MemberIdPreviousValues>() => T;
}

export interface MemberIdSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MemberIdSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MemberIdSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MemberIdPreviousValuesSubscription>() => T;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface StoryIdPreviousValuesNode {
  storyId: ID_Output;
}

export interface StoryIdPreviousValues
  extends Promise<StoryIdPreviousValuesNode>,
    Fragmentable {
  storyId: () => Promise<ID_Output>;
}

export interface StoryIdPreviousValuesSubscription
  extends Promise<AsyncIterator<StoryIdPreviousValuesNode>>,
    Fragmentable {
  storyId: () => Promise<AsyncIterator<ID_Output>>;
}

export interface AggregateStoryIdNode {
  count: Int;
}

export interface AggregateStoryId
  extends Promise<AggregateStoryIdNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStoryIdSubscription
  extends Promise<AsyncIterator<AggregateStoryIdNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateMemberIdNode {
  count: Int;
}

export interface AggregateMemberId
  extends Promise<AggregateMemberIdNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMemberIdSubscription
  extends Promise<AsyncIterator<AggregateMemberIdNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MemberIdNode {
  memberId: ID_Output;
}

export interface MemberId extends Promise<MemberIdNode>, Fragmentable {
  memberId: () => Promise<ID_Output>;
}

export interface MemberIdSubscription
  extends Promise<AsyncIterator<MemberIdNode>>,
    Fragmentable {
  memberId: () => Promise<AsyncIterator<ID_Output>>;
}

export interface MemberIdConnectionNode {}

export interface MemberIdConnection
  extends Promise<MemberIdConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<MemberIdEdgeNode>>() => T;
  aggregate: <T = AggregateMemberId>() => T;
}

export interface MemberIdConnectionSubscription
  extends Promise<AsyncIterator<MemberIdConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MemberIdEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMemberIdSubscription>() => T;
}

export interface StoryIdNode {
  storyId: ID_Output;
}

export interface StoryId extends Promise<StoryIdNode>, Fragmentable {
  storyId: () => Promise<ID_Output>;
}

export interface StoryIdSubscription
  extends Promise<AsyncIterator<StoryIdNode>>,
    Fragmentable {
  storyId: () => Promise<AsyncIterator<ID_Output>>;
}

export interface CommunityEdgeNode {
  cursor: String;
}

export interface CommunityEdge
  extends Promise<CommunityEdgeNode>,
    Fragmentable {
  node: <T = Community>() => T;
  cursor: () => Promise<String>;
}

export interface CommunityEdgeSubscription
  extends Promise<AsyncIterator<CommunityEdgeNode>>,
    Fragmentable {
  node: <T = CommunitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CommunityPreviousValuesNode {
  id: ID_Output;
  ownerId?: ID_Output;
  moderatorId?: ID_Output;
  name: String;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  privacy?: Privacy;
}

export interface CommunityPreviousValues
  extends Promise<CommunityPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  ownerId: () => Promise<ID_Output>;
  moderatorId: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  privacy: () => Promise<Privacy>;
}

export interface CommunityPreviousValuesSubscription
  extends Promise<AsyncIterator<CommunityPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  ownerId: () => Promise<AsyncIterator<ID_Output>>;
  moderatorId: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  privacy: () => Promise<AsyncIterator<Privacy>>;
}

export interface CommunitySubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CommunitySubscriptionPayload
  extends Promise<CommunitySubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Community>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommunityPreviousValues>() => T;
}

export interface CommunitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommunitySubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommunitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommunityPreviousValuesSubscription>() => T;
}

export interface MemberIdPreviousValuesNode {
  memberId: ID_Output;
}

export interface MemberIdPreviousValues
  extends Promise<MemberIdPreviousValuesNode>,
    Fragmentable {
  memberId: () => Promise<ID_Output>;
}

export interface MemberIdPreviousValuesSubscription
  extends Promise<AsyncIterator<MemberIdPreviousValuesNode>>,
    Fragmentable {
  memberId: () => Promise<AsyncIterator<ID_Output>>;
}

export interface CommunityNode {
  id: ID_Output;
  ownerId?: ID_Output;
  moderatorId?: ID_Output;
  name: String;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  privacy?: Privacy;
}

export interface Community extends Promise<CommunityNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  ownerId: () => Promise<ID_Output>;
  moderatorId: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  stories: <T = FragmentableArray<StoryIdNode>>(
    args?: {
      where?: StoryIdWhereInput;
      orderBy?: StoryIdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  members: <T = FragmentableArray<MemberIdNode>>(
    args?: {
      where?: MemberIdWhereInput;
      orderBy?: MemberIdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  bannedMembers: <T = FragmentableArray<MemberIdNode>>(
    args?: {
      where?: MemberIdWhereInput;
      orderBy?: MemberIdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  privacy: () => Promise<Privacy>;
}

export interface CommunitySubscription
  extends Promise<AsyncIterator<CommunityNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  ownerId: () => Promise<AsyncIterator<ID_Output>>;
  moderatorId: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  stories: <T = Promise<AsyncIterator<StoryIdSubscription>>>(
    args?: {
      where?: StoryIdWhereInput;
      orderBy?: StoryIdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  members: <T = Promise<AsyncIterator<MemberIdSubscription>>>(
    args?: {
      where?: MemberIdWhereInput;
      orderBy?: MemberIdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  bannedMembers: <T = Promise<AsyncIterator<MemberIdSubscription>>>(
    args?: {
      where?: MemberIdWhereInput;
      orderBy?: MemberIdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  privacy: () => Promise<AsyncIterator<Privacy>>;
}

export interface StoryIdConnectionNode {}

export interface StoryIdConnection
  extends Promise<StoryIdConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<StoryIdEdgeNode>>() => T;
  aggregate: <T = AggregateStoryId>() => T;
}

export interface StoryIdConnectionSubscription
  extends Promise<AsyncIterator<StoryIdConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StoryIdEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStoryIdSubscription>() => T;
}

export interface StoryIdSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface StoryIdSubscriptionPayload
  extends Promise<StoryIdSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StoryId>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StoryIdPreviousValues>() => T;
}

export interface StoryIdSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StoryIdSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StoryIdSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StoryIdPreviousValuesSubscription>() => T;
}

export interface AggregateCommunityNode {
  count: Int;
}

export interface AggregateCommunity
  extends Promise<AggregateCommunityNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommunitySubscription
  extends Promise<AsyncIterator<AggregateCommunityNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MemberIdEdgeNode {
  cursor: String;
}

export interface MemberIdEdge extends Promise<MemberIdEdgeNode>, Fragmentable {
  node: <T = MemberId>() => T;
  cursor: () => Promise<String>;
}

export interface MemberIdEdgeSubscription
  extends Promise<AsyncIterator<MemberIdEdgeNode>>,
    Fragmentable {
  node: <T = MemberIdSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Type Defs
 */

export const prisma: Prisma;
